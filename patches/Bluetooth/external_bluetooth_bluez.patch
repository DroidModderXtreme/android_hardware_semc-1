diff --git a/external/bluetooth/bluez/android/Android.mk b/external/bluetooth/bluez/android/Android.mk
index 082161c..af31384 100644
--- a/external/bluetooth/bluez/android/Android.mk
+++ b/external/bluetooth/bluez/android/Android.mk
@@ -461,3 +461,25 @@ LOCAL_REQUIRED_MODULES := \
 include $(BUILD_EXECUTABLE)
 
 endif
+
+#
+# hciattach
+#
+
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES:= \
+	bluez/tools/hciattach.c \
+	bluez/tools/hciattach_st.c \
+
+LOCAL_CFLAGS := $(BLUEZ_COMMON_CFLAGS)
+
+LOCAL_C_INCLUDES:= \
+	$(LOCAL_PATH)/bluez/lib \
+	$(LOCAL_PATH)/bluez/tools
+
+LOCAL_MODULE_PATH := $(TARGET_OUT_EXECUTABLES)
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE := hciattach
+
+include $(BUILD_EXECUTABLE)
diff --git a/external/bluetooth/bluez/tools/hciattach.c b/external/bluetooth/bluez/tools/hciattach.c
index db01b85..ffb13f5 100644
--- a/external/bluetooth/bluez/tools/hciattach.c
+++ b/external/bluetooth/bluez/tools/hciattach.c
@@ -42,12 +42,14 @@
 #include <sys/param.h>
 #include <sys/ioctl.h>
 
-#include <bluetooth/bluetooth.h>
-#include <bluetooth/hci.h>
-#include <bluetooth/hci_lib.h>
+#include "bluetooth.h"
+#include "hci.h"
+#include "hci_lib.h"
 
 #include "hciattach.h"
 
+#include "ppoll.h"
+
 struct uart_t {
 	char *type;
 	int  m_id;
@@ -255,78 +257,6 @@ static int ericsson(int fd, struct uart_t *u, struct termios *ti)
 	return 0;
 }
 
-/*
- * Digianswer specific initialization
- */
-static int digi(int fd, struct uart_t *u, struct termios *ti)
-{
-	struct timespec tm = {0, 50000};
-	char cmd[5];
-
-	/* DigiAnswer set baud rate command */
-	cmd[0] = HCI_COMMAND_PKT;
-	cmd[1] = 0x07;
-	cmd[2] = 0xfc;
-	cmd[3] = 0x01;
-
-	switch (u->speed) {
-	case 57600:
-		cmd[4] = 0x08;
-		break;
-	case 115200:
-		cmd[4] = 0x09;
-		break;
-	default:
-		cmd[4] = 0x09;
-		u->speed = 115200;
-		break;
-	}
-
-	/* Send initialization command */
-	if (write(fd, cmd, 5) != 5) {
-		perror("Failed to write init command");
-		return -1;
-	}
-
-	nanosleep(&tm, NULL);
-	return 0;
-}
-
-static int texas(int fd, struct uart_t *u, struct termios *ti)
-{
-	return texas_init(fd, &u->speed, ti);
-}
-
-static int texas2(int fd, struct uart_t *u, struct termios *ti)
-{
-	return texas_post(fd, ti);
-}
-
-static int texasalt(int fd, struct uart_t *u, struct termios *ti)
-{
-	return texasalt_init(fd, u->speed, ti);
-}
-
-static int ath3k_ps(int fd, struct uart_t *u, struct termios *ti)
-{
-	return ath3k_init(fd, u->speed, u->init_speed, u->bdaddr, ti);
-}
-
-static int ath3k_pm(int fd, struct uart_t *u, struct termios *ti)
-{
-	return ath3k_post(fd, u->pm);
-}
-
-static int qualcomm(int fd, struct uart_t *u, struct termios *ti)
-{
-	return qualcomm_init(fd, u->speed, ti, u->bdaddr);
-}
-
-static int intel(int fd, struct uart_t *u, struct termios *ti)
-{
-	return intel_init(fd, u->init_speed, &u->speed, ti);
-}
-
 static int read_check(int fd, void *buf, int count)
 {
 	int res;
@@ -689,111 +619,6 @@ static int csr(int fd, struct uart_t *u, struct termios *ti)
 }
 
 /*
- * Silicon Wave specific initialization
- * Thomas Moser <thomas.moser@tmoser.ch>
- */
-static int swave(int fd, struct uart_t *u, struct termios *ti)
-{
-	struct timespec tm = { 0, 500000 };
-	char cmd[10], rsp[100];
-	int r;
-
-	// Silicon Wave set baud rate command
-	// see HCI Vendor Specific Interface from Silicon Wave
-	// first send a "param access set" command to set the
-	// appropriate data fields in RAM. Then send a "HCI Reset
-	// Subcommand", e.g. "soft reset" to make the changes effective.
-
-	cmd[0] = HCI_COMMAND_PKT;	// it's a command packet
-	cmd[1] = 0x0B;			// OCF 0x0B	= param access set
-	cmd[2] = 0xfc;			// OGF bx111111 = vendor specific
-	cmd[3] = 0x06;			// 6 bytes of data following
-	cmd[4] = 0x01;			// param sub command
-	cmd[5] = 0x11;			// tag 17 = 0x11 = HCI Transport Params
-	cmd[6] = 0x03;			// length of the parameter following
-	cmd[7] = 0x01;			// HCI Transport flow control enable
-	cmd[8] = 0x01;			// HCI Transport Type = UART
-
-	switch (u->speed) {
-	case 19200:
-		cmd[9] = 0x03;
-		break;
-	case 38400:
-		cmd[9] = 0x02;
-		break;
-	case 57600:
-		cmd[9] = 0x01;
-		break;
-	case 115200:
-		cmd[9] = 0x00;
-		break;
-	default:
-		u->speed = 115200;
-		cmd[9] = 0x00;
-		break;
-	}
-
-	/* Send initialization command */
-	if (write(fd, cmd, 10) != 10) {
-		perror("Failed to write init command");
-		return -1;
-	}
-
-	// We should wait for a "GET Event" to confirm the success of
-	// the baud rate setting. Wait some time before reading. Better:
-	// read with timeout, parse data
-	// until correct answer, else error handling ... todo ...
-
-	nanosleep(&tm, NULL);
-
-	r = read(fd, rsp, sizeof(rsp));
-	if (r > 0) {
-		// guess it's okay, but we should parse the reply. But since
-		// I don't react on an error anyway ... todo
-		// Response packet format:
-		//  04	Event
-		//  FF	Vendor specific
-		//  07	Parameter length
-		//  0B	Subcommand
-		//  01	Setevent
-		//  11	Tag specifying HCI Transport Layer Parameter
-		//  03	length
-		//  01	flow on
-		//  01 	Hci Transport type = Uart
-		//  xx	Baud rate set (see above)
-	} else {
-		// ups, got error.
-		return -1;
-	}
-
-	// we probably got the reply. Now we must send the "soft reset"
-	// which is standard HCI RESET.
-
-	cmd[0] = HCI_COMMAND_PKT;	// it's a command packet
-	cmd[1] = 0x03;
-	cmd[2] = 0x0c;
-	cmd[3] = 0x00;
-
-	/* Send reset command */
-	if (write(fd, cmd, 4) != 4) {
-		perror("Can't write Silicon Wave reset cmd.");
-		return -1;
-	}
-
-	nanosleep(&tm, NULL);
-
-	// now the uart baud rate on the silicon wave module is set and effective.
-	// change our own baud rate as well. Then there is a reset event coming in
- 	// on the *new* baud rate. This is *undocumented*! The packet looks like this:
-	// 04 FF 01 0B (which would make that a confirmation of 0x0B = "Param
-	// subcommand class". So: change to new baud rate, read with timeout, parse
-	// data, error handling. BTW: all param access in Silicon Wave is done this way.
-	// Maybe this code would belong in a separate file, or at least code reuse...
-
-	return 0;
-}
-
-/*
  * ST Microelectronics specific initialization
  * Marcel Holtmann <marcel@holtmann.org>
  */
@@ -849,196 +674,6 @@ static int st(int fd, struct uart_t *u, struct termios *ti)
 	return 0;
 }
 
-static int stlc2500(int fd, struct uart_t *u, struct termios *ti)
-{
-	bdaddr_t bdaddr;
-	unsigned char resp[10];
-	int n;
-	int rvalue;
-
-	/* STLC2500 has an ericsson core */
-	rvalue = ericsson(fd, u, ti);
-	if (rvalue != 0)
-		return rvalue;
-
-#ifdef STLC2500_DEBUG
-	fprintf(stderr, "Setting speed\n");
-#endif
-	if (set_speed(fd, ti, u->speed) < 0) {
-		perror("Can't set baud rate");
-		return -1;
-	}
-
-#ifdef STLC2500_DEBUG
-	fprintf(stderr, "Speed set...\n");
-#endif
-
-	/* Read reply */
-	if ((n = read_hci_event(fd, resp, 10)) < 0) {
-		fprintf(stderr, "Failed to set baud rate on chip\n");
-		return -1;
-	}
-
-#ifdef STLC2500_DEBUG
-	for (i = 0; i < n; i++) {
-		fprintf(stderr, "resp[%d] = %02x\n", i, resp[i]);
-	}
-#endif
-
-	str2ba(u->bdaddr, &bdaddr);
-	return stlc2500_init(fd, &bdaddr);
-}
-
-static int bgb2xx(int fd, struct uart_t *u, struct termios *ti)
-{
-	bdaddr_t bdaddr;
-
-	str2ba(u->bdaddr, &bdaddr);
-
-	return bgb2xx_init(fd, &bdaddr);
-}
-
-/*
- * Broadcom specific initialization
- * Extracted from Jungo openrg
- */
-static int bcm2035(int fd, struct uart_t *u, struct termios *ti)
-{
-	int n;
-	unsigned char cmd[30], resp[30];
-
-	/* Reset the BT Chip */
-	memset(cmd, 0, sizeof(cmd));
-	memset(resp, 0, sizeof(resp));
-	cmd[0] = HCI_COMMAND_PKT;
-	cmd[1] = 0x03;
-	cmd[2] = 0x0c;
-	cmd[3] = 0x00;
-
-	/* Send command */
-	if (write(fd, cmd, 4) != 4) {
-		fprintf(stderr, "Failed to write reset command\n");
-		return -1;
-	}
-
-	/* Read reply */
-	if ((n = read_hci_event(fd, resp, 4)) < 0) {
-		fprintf(stderr, "Failed to reset chip\n");
-		return -1;
-	}
-
-	if (u->bdaddr != NULL) {
-		/* Set BD_ADDR */
-		memset(cmd, 0, sizeof(cmd));
-		memset(resp, 0, sizeof(resp));
-		cmd[0] = HCI_COMMAND_PKT;
-		cmd[1] = 0x01;
-		cmd[2] = 0xfc;
-		cmd[3] = 0x06;
-		str2ba(u->bdaddr, (bdaddr_t *) (cmd + 4));
-
-		/* Send command */
-		if (write(fd, cmd, 10) != 10) {
-			fprintf(stderr, "Failed to write BD_ADDR command\n");
-			return -1;
-		}
-
-		/* Read reply */
-		if ((n = read_hci_event(fd, resp, 10)) < 0) {
-			fprintf(stderr, "Failed to set BD_ADDR\n");
-			return -1;
-		}
-	}
-
-	/* Read the local version info */
-	memset(cmd, 0, sizeof(cmd));
-	memset(resp, 0, sizeof(resp));
-	cmd[0] = HCI_COMMAND_PKT;
-	cmd[1] = 0x01;
-	cmd[2] = 0x10;
-	cmd[3] = 0x00;
-
-	/* Send command */
-	if (write(fd, cmd, 4) != 4) {
-		fprintf(stderr, "Failed to write \"read local version\" "
-			"command\n");
-		return -1;
-	}
-
-	/* Read reply */
-	if ((n = read_hci_event(fd, resp, 4)) < 0) {
-		fprintf(stderr, "Failed to read local version\n");
-		return -1;
-	}
-
-	/* Read the local supported commands info */
-	memset(cmd, 0, sizeof(cmd));
-	memset(resp, 0, sizeof(resp));
-	cmd[0] = HCI_COMMAND_PKT;
-	cmd[1] = 0x02;
-	cmd[2] = 0x10;
-	cmd[3] = 0x00;
-
-	/* Send command */
-	if (write(fd, cmd, 4) != 4) {
-		fprintf(stderr, "Failed to write \"read local supported "
-						"commands\" command\n");
-		return -1;
-	}
-
-	/* Read reply */
-	if ((n = read_hci_event(fd, resp, 4)) < 0) {
-		fprintf(stderr, "Failed to read local supported commands\n");
-		return -1;
-	}
-
-	/* Set the baud rate */
-	memset(cmd, 0, sizeof(cmd));
-	memset(resp, 0, sizeof(resp));
-	cmd[0] = HCI_COMMAND_PKT;
-	cmd[1] = 0x18;
-	cmd[2] = 0xfc;
-	cmd[3] = 0x02;
-	switch (u->speed) {
-	case 57600:
-		cmd[4] = 0x00;
-		cmd[5] = 0xe6;
-		break;
-	case 230400:
-		cmd[4] = 0x22;
-		cmd[5] = 0xfa;
-		break;
-	case 460800:
-		cmd[4] = 0x22;
-		cmd[5] = 0xfd;
-		break;
-	case 921600:
-		cmd[4] = 0x55;
-		cmd[5] = 0xff;
-		break;
-	default:
-		/* Default is 115200 */
-		cmd[4] = 0x00;
-		cmd[5] = 0xf3;
-		break;
-	}
-	fprintf(stderr, "Baud rate parameters: DHBR=0x%2x,DLBR=0x%2x\n",
-		cmd[4], cmd[5]);
-
-	/* Send command */
-	if (write(fd, cmd, 6) != 6) {
-		fprintf(stderr, "Failed to write \"set baud rate\" command\n");
-		return -1;
-	}
-
-	if ((n = read_hci_event(fd, resp, 6)) < 0) {
-		fprintf(stderr, "Failed to set baud rate\n");
-		return -1;
-	}
-
-	return 0;
-}
-
 struct uart_t uart[] = {
 	{ "any",        0x0000, 0x0000, HCI_UART_H4,   115200, 115200,
 				FLOW_CTL, DISABLE_PM, NULL, NULL     },
@@ -1075,6 +710,10 @@ struct uart_t uart[] = {
 	{ "texasalt",   0x0000, 0x0000, HCI_UART_LL,   115200, 115200,
 				FLOW_CTL, DISABLE_PM, NULL, texasalt, NULL   },
 
+	/* ST-Ericsson CG2900 GPS FM Bluetooth combo controller */
+	{ "cg2900",     0x0000, 0x0000, HCI_UART_STE,  115200, 115200,
+				FLOW_CTL, DISABLE_PM, NULL, NULL     },
+
 	/* ST Microelectronics minikits based on STLC2410/STLC2415 */
 	{ "st",         0x0000, 0x0000, HCI_UART_H4,    57600, 115200,
 				FLOW_CTL, DISABLE_PM,  NULL, st       },
@@ -1178,10 +817,10 @@ static struct uart_t * get_by_type(char *type)
 }
 
 /* Initialize UART driver */
-static int init_uart(char *dev, struct uart_t *u, int send_break, int raw)
+static int init_uart(char *dev, struct uart_t *u, int send_break, int raw, int line_disc)
 {
 	struct termios ti;
-	int fd, i;
+	int fd;
 	unsigned long flags = 0;
 
 	if (raw)
@@ -1241,8 +880,7 @@ static int init_uart(char *dev, struct uart_t *u, int send_break, int raw)
 	}
 
 	/* Set TTY to N_HCI line discipline */
-	i = N_HCI;
-	if (ioctl(fd, TIOCSETD, &i) < 0) {
+	if (ioctl(fd, TIOCSETD, &line_disc) < 0) {
 		perror("Can't set line discipline");
 		return -1;
 	}
@@ -1267,7 +905,7 @@ static void usage(void)
 {
 	printf("hciattach - HCI UART driver initialization utility\n");
 	printf("Usage:\n");
-	printf("\thciattach [-n] [-p] [-b] [-r] [-t timeout] [-s initial_speed] <tty> <type | id> [speed] [flow|noflow] [bdaddr]\n");
+	printf("\thciattach [-n] [-p] [-a line_disc_nr] [-b] [-r] [-t timeout] [-s initial_speed] <tty> <type | id> [speed] [flow|noflow] [bdaddr]\n");
 	printf("\thciattach -l\n");
 }
 
@@ -1276,6 +914,7 @@ int main(int argc, char *argv[])
 	struct uart_t *u = NULL;
 	int detach, printpid, raw, opt, i, n, ld, err;
 	int to = 10;
+	int line_disc = N_HCI;
 	int init_speed = 0;
 	int send_break = 0;
 	pid_t pid;
@@ -1288,8 +927,11 @@ int main(int argc, char *argv[])
 	printpid = 0;
 	raw = 0;
 
-	while ((opt=getopt(argc, argv, "bnpt:s:lr")) != EOF) {
+	while ((opt=getopt(argc, argv, "bnpt:s:lra:")) != EOF) {
 		switch(opt) {
+		case 'a':
+			line_disc = atoi(optarg);
+			break;
 		case 'b':
 			send_break = 1;
 			break;
@@ -1405,7 +1047,7 @@ int main(int argc, char *argv[])
 	alarm(to);
 	bcsp_max_retries = to;
 
-	n = init_uart(dev, u, send_break, raw);
+	n = init_uart(dev, u, send_break, raw, line_disc);
 	if (n < 0) {
 		perror("Can't initialize device");
 		exit(1);
diff --git a/external/bluetooth/bluez/tools/hciattach.h b/external/bluetooth/bluez/tools/hciattach.h
index 1b23ad7..026885e 100644
--- a/external/bluetooth/bluez/tools/hciattach.h
+++ b/external/bluetooth/bluez/tools/hciattach.h
@@ -39,6 +39,7 @@
 #define HCI_UART_H4DS	3
 #define HCI_UART_LL	4
 #define HCI_UART_ATH3K  5
+#define HCI_UART_STE 6
 
 #define HCI_UART_RAW_DEVICE	0
 #define HCI_UART_RESET_ON_INIT	1
diff --git a/external/bluetooth/bluez/tools/ppoll.h b/external/bluetooth/bluez/tools/ppoll.h
new file mode 100644
index 0000000..0b758bd
--- /dev/null
+++ b/external/bluetooth/bluez/tools/ppoll.h
@@ -0,0 +1,16 @@
+#ifdef ppoll
+#undef ppoll
+#endif
+
+#define ppoll compat_ppoll
+
+static inline int compat_ppoll(struct pollfd *fds, nfds_t nfds,
+                const struct timespec *timeout, const sigset_t *sigmask)
+{
+        if (timeout == NULL)
+                return poll(fds, nfds, -1);
+        else if (timeout->tv_sec == 0)
+                return poll(fds, nfds, 500);
+        else
+                return poll(fds, nfds, timeout->tv_sec * 1000);
+}
