diff --git a/packages/apps/Bluetooth/jni/com_android_bluetooth_btservice_AdapterService.cpp b/packages/apps/Bluetooth/jni/com_android_bluetooth_btservice_AdapterService.cpp
index 48e3eb3..bd6365d 100644
--- a/packages/apps/Bluetooth/jni/com_android_bluetooth_btservice_AdapterService.cpp
+++ b/packages/apps/Bluetooth/jni/com_android_bluetooth_btservice_AdapterService.cpp
@@ -364,7 +364,7 @@ static void wake_state_changed_callback(bt_state_t state) {
 
     checkAndClearExceptionFromCallback(callbackEnv, __FUNCTION__);
 }
-static void pin_request_callback(bt_bdaddr_t *bd_addr, bt_bdname_t *bdname, uint32_t cod, uint8_t secure) {
+static void pin_request_callback(bt_bdaddr_t *bd_addr, bt_bdname_t *bdname, uint32_t cod) {
     jbyteArray addr, devname;
     if (!checkCallbackThread()) {
        ALOGE("Callback: '%s' is not called on the correct thread", __FUNCTION__);
@@ -384,7 +384,7 @@ static void pin_request_callback(bt_bdaddr_t *bd_addr, bt_bdname_t *bdname, uint
 
     callbackEnv->SetByteArrayRegion(devname, 0, sizeof(bt_bdname_t), (jbyte*)bdname);
 
-    callbackEnv->CallVoidMethod(sJniCallbacksObj, method_pinRequestCallback, addr, devname, cod, secure);
+    callbackEnv->CallVoidMethod(sJniCallbacksObj, method_pinRequestCallback, addr, devname, cod);
 
     checkAndClearExceptionFromCallback(callbackEnv, __FUNCTION__);
     callbackEnv->DeleteLocalRef(addr);
@@ -576,7 +576,7 @@ static void classInitNative(JNIEnv* env, jclass clazz) {
                                                             "([B[I[[B)V");
     method_deviceFoundCallback = env->GetMethodID(jniCallbackClass, "deviceFoundCallback", "([B)V");
     method_pinRequestCallback = env->GetMethodID(jniCallbackClass, "pinRequestCallback",
-                                                 "([B[BIZ)V");
+                                                 "([B[BI)V");
     method_sspRequestCallback = env->GetMethodID(jniCallbackClass, "sspRequestCallback",
                                                  "([B[BIII)V");
 
diff --git a/packages/apps/Bluetooth/src/com/android/bluetooth/btservice/JniCallbacks.java b/packages/apps/Bluetooth/src/com/android/bluetooth/btservice/JniCallbacks.java
index a41e7cf..b1579b8 100644
--- a/packages/apps/Bluetooth/src/com/android/bluetooth/btservice/JniCallbacks.java
+++ b/packages/apps/Bluetooth/src/com/android/bluetooth/btservice/JniCallbacks.java
@@ -59,8 +59,8 @@ final class JniCallbacks {
         mRemoteDevices.deviceFoundCallback(address);
     }
 
-    void pinRequestCallback(byte[] address, byte[] name, int cod, boolean secure) {
-        mRemoteDevices.pinRequestCallback(address, name, cod, secure);
+    void pinRequestCallback(byte[] address, byte[] name, int cod) {
+        mRemoteDevices.pinRequestCallback(address, name, cod);
     }
 
     void bondStateChangeCallback(int status, byte[] address, int newState) {
diff --git a/packages/apps/Bluetooth/src/com/android/bluetooth/btservice/RemoteDevices.java b/packages/apps/Bluetooth/src/com/android/bluetooth/btservice/RemoteDevices.java
index c126f1b..4cde750 100644
--- a/packages/apps/Bluetooth/src/com/android/bluetooth/btservice/RemoteDevices.java
+++ b/packages/apps/Bluetooth/src/com/android/bluetooth/btservice/RemoteDevices.java
@@ -393,7 +393,7 @@ final class RemoteDevices {
         mAdapterService.sendBroadcast(intent, mAdapterService.BLUETOOTH_PERM);
     }
 
-    void pinRequestCallback(byte[] address, byte[] name, int cod, boolean secure) {
+    void pinRequestCallback(byte[] address, byte[] name, int cod) {
         //TODO(BT): Get wakelock and update name and cod
         BluetoothDevice bdDevice = getDevice(address);
         if (bdDevice == null) {
@@ -418,14 +418,13 @@ final class RemoteDevices {
             return;
         }
         infoLog("pinRequestCallback: " + address + " name:" + name + " cod:" +
-                cod + "secure" + secure );
+                cod);
         // Acquire wakelock during PIN code request to bring up LCD display
         mWakeLock.acquire();
         Intent intent = new Intent(BluetoothDevice.ACTION_PAIRING_REQUEST);
         intent.putExtra(BluetoothDevice.EXTRA_DEVICE, getDevice(address));
         intent.putExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT,
                 BluetoothDevice.PAIRING_VARIANT_PIN);
-        intent.putExtra(BluetoothDevice.EXTRA_SECURE_PAIRING, secure);
         mAdapterService.sendBroadcast(intent, mAdapterService.BLUETOOTH_ADMIN_PERM);
         // Release wakelock to allow the LCD to go off after the PIN popup notification.
         mWakeLock.release();
